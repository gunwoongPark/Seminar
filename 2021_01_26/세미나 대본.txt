안녕하십니까 이번 세미나 발표를 맡게된 박 건웅입니다.

저번 시간에는 Vue.js 의 특징과 간단한 문법 및 사용법에 대해서 익혀보았습니다.

특징에 대해 설명드리다 보니 미쳐 말씀드리지 못한 부분이 있었습니다.

바로 어떠한 디자인 패턴으로 활용된 라이브러리인지 입니다.

디자인 패턴이라는 개념도 생소하여 공부해보고 웹 구현이나, 프레임워크에는 어떠한 디자인 패턴들이 자주 사용되는지 공부해 보았습니다.

(넘기)

디자인 패턴에 대해 찾아보다 보니 이러한 말이 눈에 띄었습니다.

“바퀴를 다시 발명하지 마라”

이미 만들어져서 잘 되는 것을 처음부터 다시 만들 필요가 없다는 의미입니다.

이 말을 개발자적인 측면에서 본다면, 남이 잘 짜놓은 걸 잘 가져다 쓰는 것도 능력이다? 라고 개인적으로 생각합니다.

(넘기)

개발자들이 소프트웨어를 구현하거나 설계하다보면 당연히 여러 문제에 마주치게 됩니다.

그중에는 어떻게 보면 대다수의 문제들은 유사하고 공통적일 수 있습니다. 

이러한 공통된 문제들을 해결할 수 있는 훌륭한 해결책을 우리는 패턴이라고 부릅니다.

즉 “바퀴를 다시 발명하지 마라”는 이 말은 이미 훌륭한 해결책인 패턴이 있으니 설계하거나 구현할 때 막히면 참고를 하고 이를 활용해라 라는 것으로 보입니다.

(넘기)

이러한 훌륭한 패턴들을 에릭 감마, 랄프 존슨, 존 블리시데스, 리차드 헬름 이라는 네 명의 위대한 개발자들이 체계화하여 정리한 것을 디자인 패턴이라고 합니다.

이 디자인 패턴은 개발자들끼리 협업을 잘할 수 있도록 해주는 의사소통의 수단이 될 수 있고, 재사용을 통해 개발 시간을 단축시켜주는 유용한 도구가 될 수 있습니다.

또한 개발자들의 올바른 설계를 빨리 만들 수 있도록 도와주는 해결책이라고 보시면 됩니다.

(넘기)

디자인 패턴은 총 23가지로 정리되었고 각각 생성 패턴, 구조 패턴, 행위 패턴으로 분류되어있습니다.

이러한 모든 패턴들의 종류에 대해서 지금 알아보기보다는 나중에 기회가 된다면 따로 세미나 주제로 다뤄볼 예정입니다.

간단하게라도 설명을 드리자면

생성 패턴은 객체 생성에 관련된 패턴으로 특정 객체가 생성될 때, 프로그램 구조에 최대한 영향을 끼치지 않도록 하는 것입니다.

(스앱 싱글턴 이야기)

구조 패턴은 클래스나 객체를 조합해서 더 큰 구조를 만드는 패턴으로 

예를들어 서로 다른 인터페이스를 지닌 2개의 객체를 묶어 하나의 인터페이스를 제공하는 겁니다.

(스앱 어댑터 이야기)

행위 패턴은 한 객체가 혼자 수행할 수 없는 작업을 여러 객체로 분배하는 데 있어 객체간 의존성의 최소화를 중점으로 두는 패턴입니다.

여기서 의존성이라고 하는 것은 코드에서 모듈간의 연결정도를 말합니다.

이 의존성이 강하다면 하나의 모듈이 바뀌거나 문제가 생기면 다른 모듈에도 악영향이 끼치게 되는 문제점이 발생하고

따라서 유지보수등이 힘들고, 코드의 가독성 개발 속도에 좋지 못한 영향을 끼치게 됩니다.

(넘기)

지금까지 설명드린 디자인 패턴을 GoF 디자인 패턴이라고도 부릅니다.

아까 말씀드린 네 명의 개발자들은 Gang of Four 이라고 불리었고 그의 약자인 G O F를 따 GoF 디자인 패턴이 된거죠

이 디자인 패턴은 발간된 후부터 현재까지 개발자들에게 큰 영향을 끼치고 있습니다.

저희는 지금부터 웹 프레임워크나, 웹 개발에 깊은 영향을 끼친 MVC, MVP, MVVM 패턴들의 동작이나 특징, 장단점에 대하여 알아보도록 하겠습니다.

추가적으로 더 나아가 Vue.js는 웹 개발에 어떤 디자인 패턴으로 동작했는지도 간략하게 알아보겠습니다.

(넘기)

우선 MVC 패턴입니다.

MVC 패턴은 Model View Controller 의 약자입니다.

하나의 프로젝트나 어플리케이션의 구성 요소를 이렇게 세 가지 역할로 구분한 패턴인데요.

앞으로 나올 두 가지의 패턴들도 이와 비슷하다고 보시면 됩니다.

Model 은 어플리케이션에서 사용되는 데이터와 그 데이터를 처리하는 부분으로 데이터베이스라고 생각하시면 됩니다.

View 는 말 그대로 사용자에게 보여지는 UI부분입니다.

Controller 는 사용자의 입력을 받고 처리하는 부분입니다.

(넘기)

MVC 패턴의 동작에 대해서 알아보도록 하겠습니다.

MVC 패턴은 우선 사용자 입력이 Controller로 전달됩니다. 

Controller는 입력을 바탕으로 Model을 통해서 필요한 데이터를 업데이트 합니다.

그리고 그 결과에 따라 View를 선택합니다. 이 때 하나의 Controller는 여러 개의 View를 선택할 수 있기 때문에 1:n 구조입니다.

Controller는 업데이트 될 View를 선택만 할 뿐, 직접 View를 업데이트 하지는 않습니다.

따로 업데이트 하는 방법이 세 가지 존재하는데요

View가 직접 Model을 이용한 업데이트

Model에서 View로 Notify하여 업데이트

View가 Polling 하여 Model의 변화를 감지해서 업데이트를 합니다.

이러한 동작을 간단한 웹 예시로 들어보면

사용자가 웹 사이트에 접속하면 Controller가 사용자 요청에 맞는 웹 페이지를 보여주기 위해 Model을 건들고,

그럼 Model은 데이터베이스나 필요한 파일을 반환하면 Controller가 이에 적합한 화면을 선택하게되고,

선택된 화면은 세 가지 방법으로 업데이트가 되어 사용자의 눈에 보여지게 됩니다.

이 패턴의 장점은 널리 사용되고 있는 패턴으로 가장 단순하다고 합니다.

하지만 View를 업데이트 하기 위해서는 아까 말씀드렸다 시피 모두 View와 Model 사이의 의존성이 생기게됩니다.

이는 어플리케이션이 커질수록 복잡해지고 유지보수가 어렵게 됩니다.

(넘기)

이에 MVC 패턴에서 파생된 패턴으로 MVP 패턴이 존재합니다.

다른건 다 같고 Controller 대신 Presenter라는 것이 있습니다.

Presenter는 View에서 요청한 정보로 Model을 업데이트하여 View에 다시 전달해 주는 부분입니다.

View와 Model을 붙여주는 접착제와 같은 역할을 한다고 보시면됩니다.

(넘기)

동작에 대해서 설명드리자면 아까와 달리 사용자의 입력이 View를 통하여 들어옵니다.

View는 데이터를 Presenter에 요청하고 Presenter는 Model에게 데이터를 요청합니다.

Model은 요청받은 데이터를 Presenter에 반환하고 Presenter는 반환받은 데이터를 다시 View로 응답하게 됩니다.

View는 응답받은 데이터를 기반으로 화면을 나타나게 되는겁니다.

이로써 MVC에서의 단점인 View와 Model 사이의 의존성은 없어졌다고 볼 수 있습니다.

또한 이로 인해 View는 Model을 전혀 알지 않아도 된다는 장점도 존재합니다.

하지만 View와 Presenter의 의존성이 강해진다는 단점이 존재하게 됩니다.

또한 아까 MVC는 Controller는 1대n으로 View와 연결되어 있지만 여기서 Presenter의 경우 1대1관계로 인하여 각 View마다 Presenter가 필요해 코드의 양도 많아지고 코드가 길어질 수록 이 의존성은 더 강해진다는 점이 존재합니다.

어째 크게 좋아진 부분을 느끼지는 못하겠네요.

(넘기)

MVC 패턴은 Model 과 View의 의존성을 MVP 패턴은 View와 Presenter의 의존성을 해결하지 못했습니다.

이 모든 부분을 고려하여 각 구성 요소들이 독립적으로 즉 의존하지 않도록 작동될 수 없을까 해서 설계된 패턴이 바로 MVVM 패턴입니다.

Model 과 View는 이전과 동일하지만 View Model 이라는 새로운 구성 요소가 생겼습니다.

이 View Model은 말 그대로 View 를 위한 Model로 여기서 Model은 여태 설명드린 일반적인 Model과 살짝 다르게 View에 맞춰진 전용 Model을 의미합니다.

(넘기)

동작 방식을 설명드리겠습니다.

사용자의 입력은 View를 통해 들어오게 되고, Command 패턴으로 View Model에 전달하게 됩니다.

Command 패턴이란 아까 설명드린 GoF디자인 패턴의 행위 패턴 중 하나로 실행될 기능이나 요청을 캡슐화하여 재사용이 가능하도록 하는 패턴입니다.

그 후, View Model은 Model에게 데이터를 요청하고 Model은 View Model에게 요청받은 데이터를 응답합니다. 

아까와 비슷하다고 보시면 됩니다.

이 후 View Model 이 응답받은 데이터를 가공하여 저장하기만 하면 View는 Data Binding으로 인해 자동으로 업데이트 됩니다.

데이터바인딩과 Command 패턴이 잘 활용되어 모든 의존성이 해결된 것을 볼 수 있습니다.

각각 모든 구성요소가 독립적이기 때문에 모듈화하여 개발할 수 있다는 장점도 존재합니다.

다만 이 View Model 이라는 것을 설계하는 것이 상당히 어렵다고하네요

하지만 사람들이 미리 만들어 둔 View Model이 있었고 제가 몇 주간 세미나로 소개를 드렸는데요

(넘기)

그게 바로 자바스크립트 프레임워크인 Vue.js 입니다.

MVVM 패턴의 VM 부분을 Vue.js 가 담당하여 View 부분에 해당하는 DOM과 Model 부분에 해당하는 자바스크립트를 서로 연결해주는 역할을 하는 겁니다.

지금까지 자주 쓰이는 여러 웹 디자인 패턴 또는 프레임 워크 패턴에 대하여 알아보았습니다.

각 패턴의 장단점과 특징에 대하여 비교하며 나열했지만 이 패턴은 무조건 좋다, 이건 안좋다 라는 것은 없습니다.

전부 좋은 패턴이고 각자 판단하여 상황에 맞는 디자인 패턴을 사용하는 것이 중요하다고 생각합니다.