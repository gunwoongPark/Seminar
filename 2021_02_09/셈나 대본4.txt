이번 시간에는 저저번 시간에 공부해본 Vue.js의 간단한 사용법에 이어 마저 설명을 마치고

알아두면 유용한 공식 라이브러리와

제가 해본 프로젝트를 소개시켜드리려고 합니다.

(넘기)

저번 시간에 v- 접두어가 붙은 걸 전부 Vue.js의 템플릿 문법에 해당하는 디렉티브라고 배웠습니다.

이들은 데이터를 바인딩 해주는 v-bind 

이벤트나 메소드들을 바인딩 해주는 v-on

배열과 같은 데이터를 렌더링 해주는 v-for

조건에 따라 렌더링 여부를 결정하는 v-if

사용자의 입력을 감지하고 자동으로 변경되는 v-model 등이 있었습니다.

이들은 전부 HTML 태그의 특수 속성으로 들어가 작동됐었습니다.

오늘은 디렉티브가 아닌 Vue 인스턴스 내부의 속성에 대해 마저 알아보도록 하겠습니다.

(넘기)

이전의 예제를 살펴보며 세 가지 속성에 대해서 소개했습니다.

라이프사이클(객체가 생성되고 나서 소멸되기 까지의 일련의 과정)에 맞춰 호출되는 라이프사이클 훅

변수를 저장하는 데이터

함수를 저장하는 메소드등이 있었습니다.

이것들 외에 오늘 정말 유용한 computed 속성과 watch 속성에 대하여 설명드리도록 하겠습니다.

(넘기)

Computed 는 기존의 오리지널 데이터를 가공하여 바뀐 데이터를 반환하는 getter처럼 사용됩니다. 즉 반응형 Getter라고 생각하시면 됩니다.

예제를 보시면 todos라는 간단한 객체 배열이 존재합니다.

이 객체 배열을 computed 속성에서 자바스크립트 배열 내장함수를 통해 가공하여 computedTodos로 사용할 수 있도록 하는 것인데요

보시면 각 요소를 순환하며 가공을 하는데 스프레드 문법을 사용해 기존 데이터는 남기되 id, done 같은 키 벨류를 추가하도록 가공했습니다.

이 computedTodos는 함수처럼 보이는데 데이터처럼 사용되고 보시다시피 리스트렌더링이 되는 것을 볼 수 있습니다.

결과를 보도록 하겠습니다.

(넘기)

(동작 설명)

(넘기)

그렇다면 이러한 computed 속성을 왜 쓸까요?

데이터의 가공이라면 methods를 통해서 하면 되는걸

굳이 왜쓰냐면 캐싱 기능이 있습니다.

아까 말씀드렸다 시피 Computed는 함수같지만 변수처럼 사용이 가능합니다.

예제에서 보시면 문자열을 거꾸로 가공해서 출력하는 예제가 있습니다.

Methods로 하는 방식과 computed 로 하는 방식이 있습니다.

3번의 출력을 위해서는 함수가 세 번 실행 되어야 합니다.

만약 3번이 아니라 100번이었다면, 문자열을 뒤집는 로직이 아니고 더 복잡했다면, 부하는 더 커지게 되겠죠

반면에 computed의 경우 캐싱 기능 덕분에 한번 데이터를 가공하면 그 데이터를 재사용이 가능하기 때문에 효율적으로 사용할 수 있습니다.

세번의 연산을 한번의 연산으로 줄일 수 있기 때문에 사용됩니다.

(넘기)

아까 computed 예제를 소개시켜드릴 때, 종속성으로 인해 오리지널 데이터가 변경되면 computed 데이터도 변경된다고 말씀드렸습니다.

Watch도 상당히 유사한 기능을 합니다.

Watch는 특정 데이터를 감시하는 감시자 역할을 하고 

특정 데이터가 변경되면 이를 감지하고 정의해둔 함수가 실행되는 방식인데요.

예제를 보시면 watch에 msg라는 데이터를 묶어두고 만약 해당 데이터가 변경되면 변경된 데이터와 함께 출력문을 호출하도록 하였습니다.

(넘기)

(동작 설명)

(넘기)

하지만 watch 와 computed의 차이를 잘 모르겠습니다.

실제로 이를 헷갈리고 watch를 남용하는 경우가 많다고 합니다.

그렇다면 차이점은 무엇이고 어떠한 상황에 어떤 것을 사용해야 하는가

결론 부터 말하자면

변경이 일어날 때 무언가를 실행하는 것은 같지만

특정 동작을 취해야 하는 상황은 watch, 그 외 상황은 대체로 computed가 적합하다고 볼 수 있다.

Computed는 이미 정의된 계산식에 따라 결과값을 반환 return 할 때 사용되며, watch는 어떤 특정 조건에서 함수를 실행시키기 위한 트리거로서 사용할 수 있다.

또한 값이기 때문에 computed는 return이 꼭 필요하다 라는 점도 존재합니다.

즉 최대한 computed로 해결할 수 있으면 해결하라가 적합합니다.

말로만 하면 어려우니 코드를 보도록 하겠습니다.

(넘기)

예제 코드를 보시면 count라는 변수가 감소 되어 특정 값이 될 때, 특정 동작을 행하도록 computed와 watch를 사용하여 나타냈습니다.

Computed에서는 감소되어 값이 2가 되면 다이얼로그를 출력하고

Watch에서는 감소되어 0이 된다면 다이얼로그를 출력하고 count를 3으로 초기화하는 로직들을 추가해봤습니다.

(넘기)

(동작설명)

이 속성들까지 하여 vue의 기본적인 문법에 대하여는 다 마쳤습니다.

다음으로는 vue의 가장 강력한 기능인 컴포넌트 기능에 대해 설명드리겠습니다.

(넘기)

컴포넌트는 Vue의 가장 강력한 기능중 하나라고 저번에 설명드린 적이 있습니다.

Vue는 화면이나 기능을 적절하게 분리하여 컴포넌트화 시켜 개발하고 이것들을 연결하여 작동하도록 했습니다.

그렇게 컴포넌트로 나누어 웹을 구성하는 예제를 보여드리려고 하는데 앞으로는 cdn방식으로 Vue 코드를 불러와 하는 방식이 아닌

Vue-cli라는 개발 툴을 통해 작업환경을 쉽게 구성한 후 예제를 보여드리도록 하겠습니다.

(넘기)

Vue cli를 통해 작업환경을 구축하면 다음과 같은 폴더 구조가 생성됩니다.

.vue라는 확장자를 가지는 파일들이 앞으로 다루는 요소와 Vue 문법과 스타일이 들어있는 코드입니다.

App이라는 하나의 파일이 화면에 렌더링되고 그 안에 라우터링크나 컴포넌트들이 들어가 웹 페이지를 구성하도록 하는 것입니다.

컴포넌트는 components라는 폴더에 보관하고 assets 이라는 폴더에 사진등을 보관한다고 보시면 됩니다.

App이라는 파일 내부를 살펴보면 template 태그에서는 html 요소들이

Script에서는 이전에 배웠던 Vue 문법들

Style에서는 그냥 css나 sass 스타일들이 들어가게 되는 간단한 구조를 가지고 있습니다.

그럼 지금부터 이 것을 활용해 컴포넌트를 활용한 예제를 보도록 하겠습니다.

(넘기)

우선 간단하게 만든 예제 페이지를 보여드리겠습니다.

사진 공유 커뮤니티처럼 꾸며 봤습니다.

정말 간단하죠

(넘기)

컴포넌트화는 헤더 바디 푸터로 총 세개로 나뉘어서 구현했습니다.

컴포넌트 구조를 도식화 한다면 다음과 같습니다.

각 컴포넌트들을 import하여 App.vue 내부에서 하나의 HTML 요소처럼 쓰이도록 구현했습니다.

(넘기)

(각 컴포넌트들 설명)

(넘기)

컴포넌트들은 서로 데이터를 주고 받을 수 있습니다.

우선 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하는 방식이 있습니다.

이를 vue에서는 props라 합니다.

예제를 보시면 App.vue라는 최상단의 부모에서 userName이라는 데이터를 Footer 컴포넌트에 전달하여 박건웅 이라고 나온 이름을 홍길동으로 변경시키는 예제입니다.

보시면 이렇게 userName이라는 이름으로 전달할 데이터를 바인딩하여 보내주었고

자식 컴포넌트인 Footer.vue에서는 props라는 속성으로 받아서 사용하는 것을 볼 수 있습니다.

(넘기)

이렇게 정상적으로 변경도 되었고요

(넘기)

부모에서 자식으로 데이터가 전달되듯 자식에서 부모로 데이터를 전달해야 하는 경우도 존재합니다.

자식 컴포넌트의 경우 부모로부터 받은 데이터를 변경하게 될 경우 에러가 출력됩니다.

이는 Vue 자체적으로 지양하는 것으로 전달받은 데이터는 원래의 부모 컴포넌트에서 변경되어야 합니다.

예제를 변경하여 홍길동으로 전달받은 데이터를 클릭하면 홍길동2로 변경되도록 간단하게 로직을 추가해보았습니다.

(넘기)

당장에 값은 변경되지만 빨간 에러가 출력된다.

이는 나중에 가면 여러 문제점을 가져올 수 있다고 해서 피해야 하는 방법이라고 합니다.

그렇다면 자식 컴포넌트에서 데이터를 변경할 방법은 없을까요

(넘기)

없습니다.

그래서 우리는 자식이 부모에게 데이터를 변경해주세요 하고 이벤트를 전달하게 됩니다.

이를 emit이라고 부르고요

동작방식은 이러합니다.

기존의 props를 변경하는 코드는 주석처리를 하고 emit을 통해 전달받을 이벤트의 이름과 바뀔 데이터를 파라미터로 전달하게 됩니다.

부모는 이를 받아 새로 함수를 정의하여 자신이 가지고 있던 data를 변경하게 됩니다.

(넘기)

(동작 설명)

(넘기)

이로써 저는 Vue에 대해 공부해서 알게 된 내용에 대해서 거의 다 말씀을 드려보았습니다.

추가적으로 Vue에는 유용한 라이브러리가 몇 가지 존재하는데 이에 대해 간단히 설명해드리겠습니다.

Vuex : 상태 관리 라이브러리로서 컴포넌트의 수가 많아지거나 구조가 깊어질 경우 데이터를 관리하는 데 있어 공유하는 저장소로 작용하여 코드가 간결해진다.

Vue-Router : 라우팅 기능을 구현할 수 있도록 지원하는 공식 라이브러리입니다.

라우팅이란 페이지를 이동하는 방법중 하나인데요

서버에 페이지를 새로 요청하는 것이 아니라 미리 여러 페이지들을 받아놓고 사용자의 행위에 따라 화면을 갱신하는 방식으로 전에 설명드린 SPA라고 생각하시면 됩니다.

Vuetify : vue에서 가장 많이 사용되는 UI Toolkit으로 다양한 ui 컴포넌트들을 제공한다.

(넘기)

프젝 설명
